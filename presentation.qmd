---
title: "A Quarto reveal.js theme"
author: "Garth Tarr"
institute: "The University of Sydney"
format:
  revealjs:
     # can set self-contained to false if not uploading to Canvas
     # true makes the HTML files pretty big
    self-contained: true
    fig-format: retina
    toc: true
    toc-depth: 1
    toc-title: "In this lecture"
    theme: [default, "sydney.scss"]
    code-line-numbers: false
    slide-number: c
    scrollable: false
    pdf-max-pages-per-slide: 1
    history: false # don't add each slide to browser history
bibliography: pres_bib.bib
csl: apa-old-doi-prefix.csl
execute:
  echo: true
---

```{r, echo = FALSE}
library(tidyverse)
library(caret)
library(ranger)
library(tree)
```

# First section

## Random Forest Model

```{r readsplitdata, message=FALSE}

set.seed(5003)

alzdata <- read.csv("alzheimers_disease_data.csv")
alzdata$Diagnosis <- factor(alzdata$Diagnosis, levels = c(0, 1), labels = c("No", "Yes"))
alzdata <- subset(alzdata, select = -c(PatientID, DoctorInCharge))

indices <- createDataPartition(alzdata$Diagnosis, p = 0.7, list = FALSE)
train_dat <- alzdata[indices,]
test_dat <- alzdata[-indices, ]

```

``` {r singletree, message=FALSE}
treemap <- tree(Diagnosis ~ ., data = train_dat)
plot(treemap)
text(treemap)
```

```{r treeseq, message=FALSE}
ntree_seq <- c(1, 50, 100, 400, 500, 700, 800, 900, 1000, 2000)
```

```{r rfB, message=FALSE}
max.ntree_seq <- max(ntree_seq)
test_diagnosis <- test_dat[["Diagnosis"]]
ranger_model <- ranger(Diagnosis ~ ., data = train_dat, num.trees = max.ntree_seq)
rand.forest.function <- function(x) { 
  predict_ranger <- predict(ranger_model, data = test_dat, num.trees = x)[["predictions"]]
  CM <- confusionMatrix(test_diagnosis, predict_ranger)
  Sensit <- CM$byClass[["Sensitivity"]]
  Specif <- CM$byClass[["Specificity"]]
  Accura <- CM$overall[["Accuracy"]]
  TP <- CM$table["Yes", "Yes"]
  FP <- CM$table["Yes", "No"]
  FN <- CM$table["No", "Yes"]
  precision <- TP / (TP + FP)
  recall <- TP / (TP + FN)
  F1 <- 2 * (precision * recall) / (precision + recall)
  Performance_measures <- list(Sensitivity = Sensit, Specificity = Specif, Accuracy = Accura, F1 = F1)
  }
perf_measures <- map(ntree_seq, rand.forest.function)
specificities <- map_dbl(perf_measures, "Specificity")
plot_data <- data.frame(ntree_seq, specificities)
ggplot(plot_data, aes(x = ntree_seq, y = specificities)) +
  geom_line() +
  geom_point() + 
  geom_text(aes(label = round(specificities, 4)), 
            vjust = -0.5, 
            color = "black", 
            size = 3.5) +
  labs(x = "Number of Trees", y = "Specificity") +
  theme_minimal()


perf_measures_df <- map_dfr(ntree_seq, function(x) {
  perf <- rand.forest.function(x)
  data.frame(ntree_seq = x,
             Sensitivity = perf$Sensitivity,
             Specificity = perf$Specificity,
             Accuracy = perf$Accuracy,
             F1 = perf$F1)
})

# Reshape the data to long format for ggplot2
perf_measures_long <- perf_measures_df %>%
  pivot_longer(cols = c(Sensitivity, Specificity, Accuracy, F1),
               names_to = "Measure",
               values_to = "Value")

# Create the grouped bar plot
ggplot(perf_measures_long, aes(x = factor(ntree_seq), y = Value, fill = Measure)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(x = "Number of Trees", y = "Value", title = "Performance Measures by Number of Trees") +
  scale_fill_brewer(palette = "Paired") +  # Use a color palette for better visualization
  theme_minimal()


```
## Quarto

::: callout-note
### Note title

Note text
:::

::: callout-tip
### Tip title

Tip text
:::

::: callout-important
### Important title

Important text
:::

::: notes
Speaker notes go here. Press `s` to see.
:::

::: footer
Footers for comments, or links to further resources. These don't show up when printing the slides to pdf!
:::

## Asides

> Block quote

-   For further details on customisations available see [here](https://quarto.org/docs/presentations/revealjs/)
-   Icons can be included by installing the [fontawesome](https://github.com/quarto-ext/fontawesome) Quarto [extension](https://quarto.org/docs/extensions/).

::: aside
Asides will be on the slide when printed.
:::

# Layouts

## Layout

::: {layout-ncol="2"}
### List One

-   [Item A]{.blue}
-   [Item B]{.red}
-   [Item C]{.purple}
-   Item D

### List Two

-   **Item X**
-   *Item Y*
-   ~~Item Z~~
:::

## Columns (more customisable)

::: columns
::: {.column width="40%"}
Left column
:::

::: {.column width="60%"}
Right column
:::
:::

## Plots: below code

```{r}
library(ggplot2)
p1 = iris |> ggplot() +
  aes(x = Petal.Length, y = Petal.Width, colour = Species) + 
  geom_point(size = 4) + theme_classic(base_size = 20)
p1
```

## Plots: hide code using `echo: false`

```{r}
#| echo: false
p1
```

## Plots: auto two column using `output-location: column`

```{r}
#| output-location: column
#| fig-height: 8
p1 = iris |> ggplot() +
  aes(x = Petal.Length, 
      y = Petal.Width, 
      colour = Species) + 
  geom_point(size = 4) + 
  theme_classic(base_size = 30)
p1
```

## Bullets

When you click the **Render** button a document will be generated that includes:

-   Content authored with markdown
-   Output from executable code

. . .

Reference @tidyverse

## Code

When you click the **Render** button a presentation will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```

## Handy R package

The [`quartostamp`](https://matt-dray.github.io/quartostamp/index.html) R package provides RStudio "Addins" that make life easier for working with Quarto documents. It has a bunch of templates, e.g. for creating

-   callout blocks
-   columns
-   tabsets
-   footnotes
-   pauses
-   speaker notes...

## References
